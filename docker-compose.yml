# Раздел со всеми контейнерами, сервисами, которые Compose будет поднимать
services:
  db: # имя сервиса
    image: postgres:15
    container_name: order_db
    restart: unless-stopped
    ports:
    - "${PG_PORT:-5433}:5432" # Если переменная окружения не задана, мы задаем свою
    # определяем переменные окружения
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
      POSTGRES_DB: ${PG_DB:-order_service}
    # нужны для надежного хранения данных даже при перезапуске контейнера
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres} -d ${PG_DB:-order_service}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda start
      - --smp=1 # ограничимся одним ядром
      - --overprovisioned # позволяем запускать на более слабых машинах
      - --node-id=0 # уникальный ID брокера (у нас он один)
      - --kafka-addr INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092
      - --advertise-kafka-addr INTERNAL://redpanda:9092,EXTERNAL://localhost:19092
    ports:
      - "9092:9092"
      - "19092:19092"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health --exit-when-healthy || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20

  #  Kafka UI (удобный веб-интерфейс)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: redpanda:9092
    depends_on:
      - redpanda
volumes:
  pgdata:
